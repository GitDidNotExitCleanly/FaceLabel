package com.facelabel.processing.faceRecognizer;

import java.io.File;
import java.io.FileOutputStream;

import org.bytedeco.javacpp.opencv_contrib;
import org.bytedeco.javacpp.opencv_contrib.FaceRecognizer;
import org.bytedeco.javacpp.opencv_core.FileStorage;
import org.bytedeco.javacpp.opencv_core.Mat;
import org.bytedeco.javacpp.opencv_core.MatVector;
import org.bytedeco.javacpp.opencv_highgui;
import org.bytedeco.javacpp.opencv_imgproc;

import com.facelabel.database.ContactsData;

import android.content.Context;
import android.graphics.Bitmap;
import android.os.Environment;

public class Recognizer {
	
	private static FaceRecognizer fr = opencv_contrib.createLBPHFaceRecognizer(1,8,8,8,2);
	
	public void train(Context ctx) {
		
		int totalMembers = 0;
		for (int i=0;i<ContactsData.getContacts().size();i++) {
			totalMembers += ContactsData.getContacts().get(i).getGroupMembers().size();
		}
		
		if (totalMembers > 0) {
			MatVector trainingImages = new MatVector(totalMembers);
			int[] labels = new int[totalMembers];	
			
			int count = 0;
			for (int i=0;i<ContactsData.getContacts().size();i++) {
				for (int j=0;j<ContactsData.getContacts().get(i).getGroupMembers().size();j++) {
					long memberId = ContactsData.getContacts().get(i).getGroupMembers().get(j).getId();
					Mat mRgb = opencv_highgui.imread(ContactsData.getContacts().get(i).getGroupMembers().get(j).getPhoto());
					Mat mGray = new Mat();
					opencv_imgproc.cvtColor(mRgb, mGray, opencv_imgproc.COLOR_BGR2GRAY);
					trainingImages.put(count, mGray);
					labels[count] = (int) memberId;
					count++;
				}
			}
			Mat labelsM = new Mat(labels);
	 
			fr.train(trainingImages, labelsM);
		}
	}
	
	public void save(Context ctx) {
		
		String path = Environment.getExternalStorageDirectory()
	            + "/Android/data/"
	            + ctx.getApplicationContext().getPackageName()
	            + "/Model/";
		
		File modelStorage = new File(path+"FaceModel.xml");
		FileStorage fs = new FileStorage();
		fs.open(path+"FaceModel.xml", FileStorage.WRITE);
		fr.save(fs);
		fs.release();
	}
	
	public int predict(Bitmap bmp, Context ctx) {
		if (bmp != null) {
			
			String path = Environment.getExternalStorageDirectory()
		            + "/Android/data/"
		            + ctx.getApplicationContext().getPackageName()
		            + "/";

			FileOutputStream os;
			try {
				os = new FileOutputStream(path+"temp.png",true);
				bmp.compress(Bitmap.CompressFormat.PNG, 100, os);
				os.close();
			} catch (Exception e) {
				e.printStackTrace();
			}

			Mat mRgb = opencv_highgui.imread(path+"temp.png");
			
			new File(path+"temp.png").delete();
			
			Mat mGray = new Mat();
			opencv_imgproc.cvtColor(mRgb,mGray,opencv_imgproc.COLOR_BGR2GRAY);
			
			int[] ids = new int[1];
			double[] prob = new double[1];
			
			fr.predict(mGray,ids,prob);
			
			System.out.println("probability: "+prob[0]);
			
			return ids[0];
		}
		else {
			return -1;
		}
	}
}
