package com.facelabel.processing.faceRecognizer;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

import org.opencv.android.BaseLoaderCallback;
import org.opencv.android.CameraBridgeViewBase;
import org.opencv.android.LoaderCallbackInterface;
import org.opencv.android.CameraBridgeViewBase.CvCameraViewFrame;
import org.opencv.android.CameraBridgeViewBase.CvCameraViewListener2;
import org.opencv.core.Mat;
import org.opencv.core.Scalar;
import org.opencv.objdetect.CascadeClassifier;

import com.facelabel.MyExceptionHandler;
import com.facelabel.R;
import com.facelabel.R.id;
import com.facelabel.R.layout;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.WindowManager;
import android.view.View.OnClickListener;
import android.widget.ImageButton;
import android.widget.ImageView;

public class TrainingActivity extends Activity implements CvCameraViewListener2 {

	private ProgressDialog progressDialog;
	
	private ImageButton takePhoto;
	private ImageButton train;
	
	private int photoSize = 0;
	private ImageView[] trainingPhotos;
	
	private Mat lastValidRect;
	private Mat currentRect;
	
    private static final Scalar    FACE_RECT_COLOR     = new Scalar(0, 255, 0, 255);
    public static final int        JAVA_DETECTOR       = 0;

    private Mat                    mRgba;
    private Mat                    mGray;   
    private File                   mCascadeFile;
    private CascadeClassifier      mJavaDetector;

    private int                    mDetectorType       = JAVA_DETECTOR;

    private float                  mRelativeFaceSize   = 0.45f;
    private int                    mAbsoluteFaceSize   = 0;

    private CameraBridgeViewBase   mOpenCvCameraView;

    private BaseLoaderCallback  mLoaderCallback = new BaseLoaderCallback(this) {
        @Override
        public void onManagerConnected(int status) {
            switch (status) {
                case LoaderCallbackInterface.SUCCESS:
                {
                	
                    try {
                        // load cascade file from application resources
                        InputStream is = getResources().openRawResource(R.raw.haarcascade_frontalface_alt);
                        File cascadeDir = getDir("cascade", Context.MODE_PRIVATE);
                        mCascadeFile = new File(cascadeDir, "haarcascade_frontalface_alt.xml");
                        FileOutputStream os = new FileOutputStream(mCascadeFile);

                        byte[] buffer = new byte[4096];
                        int bytesRead;
                        while ((bytesRead = is.read(buffer)) != -1) {
                            os.write(buffer, 0, bytesRead);
                        }
                        is.close();
                        os.close();

                        mJavaDetector = new CascadeClassifier(mCascadeFile.getAbsolutePath());
                        if (mJavaDetector.empty()) {
                            mJavaDetector = null;
                        } else

                        cascadeDir.delete();

                    } catch (IOException e) {
                        e.printStackTrace();
                    }

                    mOpenCvCameraView.enableView();
                } break;
                default:
                {
                    super.onManagerConnected(status);
                } break;
            }
        }
    };

	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
		
		setContentView(R.layout.activity_training);
		
		Thread.setDefaultUncaughtExceptionHandler(new MyExceptionHandler());
		
        mOpenCvCameraView = (CameraBridgeViewBase) findViewById(R.id.training_activity_surface_view);
        mOpenCvCameraView.setCvCameraViewListener(this);
		
		setTrainingPhotoList();
		
		setButtons();
	}

	private void setTrainingPhotoList() {
		this.trainingPhotos = new ImageView[5];
		this.trainingPhotos[0] = (ImageView)findViewById(R.id.trainingImage1);
		this.trainingPhotos[1] = (ImageView)findViewById(R.id.trainingImage2);
		this.trainingPhotos[2] = (ImageView)findViewById(R.id.trainingImage3);
		this.trainingPhotos[3] = (ImageView)findViewById(R.id.trainingImage4);
		this.trainingPhotos[4] = (ImageView)findViewById(R.id.trainingImage5);
	}
	
	private void setButtons() {
		this.takePhoto = (ImageButton)findViewById(R.id.training_take);
		this.train = (ImageButton)findViewById(R.id.training_train);
		
		this.takePhoto.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				
				
			}
			
		});
		
		this.train.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				
				
			}
			
		});
	}

	@Override
	public void onCameraViewStarted(int width, int height) {
		
		
	}

	@Override
	public void onCameraViewStopped() {
		
		
	}

	@Override
	public Mat onCameraFrame(CvCameraViewFrame inputFrame) {
		return null;
	}

}
